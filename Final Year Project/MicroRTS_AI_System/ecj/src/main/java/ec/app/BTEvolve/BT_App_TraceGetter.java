/*
 * File created by: Matthew Burr as students at Edith Cowan University
 * For use in the Applied IT Project 2018
 */

package ec.app.BTEvolve;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JTextArea;
import java.awt.BorderLayout;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;

import ec.Evolve;
import jbt.model.core.ModelTask;
import tests.ECJ_Tournament;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JButton;
import javax.swing.JScrollPane;

public class BT_App_TraceGetter implements ActionListener {


	
	Thread thread;
	
	private JFrame frmMicrortsAiGui;
	
	private JTextArea textAreaOutput;
	private JButton btnChooseMap;
	private JButton btnRun;
	private JButton btnTrees;
	private JComboBox comboBoxOpponent;
	
	//File chooser to get the map
	JFileChooser fc;
	
	//File chooser to get the best tree stat file(s)
	JFileChooser fcm;
	
	// File handler
	File file;
	File[] files;
	
	// path to map
	protected String mapPath;
	// type of opponent
	protected String opponentName;
	// Send the console outputs to the text area
	protected PrintStream standardOut;
	protected PrintStream printStream;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					BT_App_TraceGetter window = new BT_App_TraceGetter();
					window.frmMicrortsAiGui.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public BT_App_TraceGetter() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frmMicrortsAiGui = new JFrame();
		frmMicrortsAiGui.setTitle("MicroRTS AI GUI: Trace Getter");
		frmMicrortsAiGui.setBounds(100, 100, 565, 430);
		frmMicrortsAiGui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmMicrortsAiGui.getContentPane().setLayout(null);
		
		JLabel lblTree = new JLabel("Select statistic output file(s):");
		lblTree.setToolTipText("This button allows you to select multiple files containing the best trees of the run(s).\r\n\r\nSimply click the 'Select Trees' button, navigate to and select your statistics files generated by the evolution run. The statistic files you'll want to input will end with 'out.stat' NOT 'out_2.stat'.");
		lblTree.setBounds(10, 10, 146, 21);
		frmMicrortsAiGui.getContentPane().add(lblTree);
		
		btnTrees = new JButton("Select Stat File(s)");
		btnTrees.setBounds(10, 31, 136, 21);
		frmMicrortsAiGui.getContentPane().add(btnTrees);
		
		JLabel lblOpponent = new JLabel("Opponent");
		lblOpponent.setBounds(214, 10, 71, 13);
		frmMicrortsAiGui.getContentPane().add(lblOpponent);
		
		// The Opponent combobox
		String[] opponentAi = {"PassiveAI", "LightRush", "HeavyRush", "WorkerRush", "Custom_LightRush"};
		comboBoxOpponent = new JComboBox(opponentAi);
		comboBoxOpponent.setBounds(295, 6, 131, 21);
		frmMicrortsAiGui.getContentPane().add(comboBoxOpponent);
		
		
		JLabel lblMap = new JLabel("Map");
		lblMap.setBounds(214, 35, 45, 13);
		frmMicrortsAiGui.getContentPane().add(lblMap);
		
		btnChooseMap = new JButton("Choose map");
		btnChooseMap.setBounds(295, 31, 131, 21);
		frmMicrortsAiGui.getContentPane().add(btnChooseMap);
		
		btnRun = new JButton("Generate Traces");
		btnRun.setBounds(295, 80, 131, 40);
		frmMicrortsAiGui.getContentPane().add(btnRun);
		
		textAreaOutput = new JTextArea();
		textAreaOutput.setBounds(201, 195, 225, 59);
		frmMicrortsAiGui.getContentPane().add(textAreaOutput);
		
		JScrollPane scrollPane = new JScrollPane(textAreaOutput);
		scrollPane.setBounds(10, 125, 529, 255);
		frmMicrortsAiGui.getContentPane().add(scrollPane);
		scrollPane.setVerticalScrollBarPolicy ( ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS );

		fc = new JFileChooser();
		file = fc.getSelectedFile();
		
		fcm = new JFileChooser();
		fcm.setMultiSelectionEnabled(true);
		files = fcm.getSelectedFiles();
		
		// Add action listeners
		comboBoxOpponent.addActionListener(this);
		btnChooseMap.addActionListener(this);
		btnTrees.addActionListener(this);
		btnRun.addActionListener(this);
		
		// Print console info to text area
		printStream = new PrintStream(new CustomOutputStream(textAreaOutput));
		// keeps reference of standard output stream
        standardOut = System.out;
        
        System.out.println(printStream);
         
        // re-assigns standard output stream and error output stream
        System.setOut(printStream);
        System.setErr(printStream);

	}
	
	

	

	
	@Override
	public void actionPerformed(ActionEvent e) {      
        // map chooser button
        if (e.getSource() == btnChooseMap) {
            int returnVal = fc.showOpenDialog(frmMicrortsAiGui);
            file = fc.getSelectedFile();
            
            try {
                mapPath = file.getAbsolutePath();
            }
            catch (Exception exc)
            {
            	mapPath = "";
            }
            
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                //This is where a real application would open the file.
                textAreaOutput.append("Opening: " + mapPath + "." + "\n");
            } else {
            	textAreaOutput.append("Open command cancelled by user." + "\n");
            }
        }else if (e.getSource() == comboBoxOpponent) {
    		// Combo action
            opponentName = (String)comboBoxOpponent.getSelectedItem();
            textAreaOutput.append("Opponent selected: " + opponentName + "\n");
        }else if(e.getSource() == btnTrees) {
        	int returnVal = fcm.showOpenDialog(frmMicrortsAiGui);	
        	files = fcm.getSelectedFiles();
        	int localFileCount = 1;
        	
        	if (returnVal == JFileChooser.APPROVE_OPTION)
        	{
        		
        		for (File f : files)
        		{
            		textAreaOutput.append("Selected file "+localFileCount+": "+f+"."+"\n");
            		localFileCount++;
        		}
        		
        		
        	} else {
        		textAreaOutput.append("Open command cancelled by user."+"\n");
        	}

        }
        else if (e.getSource() == btnRun) {
        	
        	// check that input is not null
        	if (file == null)
        	{
        		System.out.println("ERROR: No map selected\n");
        	}
        	else {
        		
        		System.out.println("GETTING TRACES....\n");
	        	// run button
	        	
        		// Retrieve trace files
        		thread = new MySecondThread(files, mapPath, opponentName);
        		thread.start();

			

    		}		
    	}
	}
}

	
